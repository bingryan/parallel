# This first stage prepares our dependencies to be built by `cargo-chef`.
FROM docker.io/paritytech/ci-linux:production as planner
LABEL description="This is the 1st stage: Here we plan the build dependencies with `cargo-chef`."

WORKDIR /parallel
RUN cargo install cargo-chef
COPY . .
RUN cargo chef prepare --recipe-path recipe.json

# This second stage is where the dependencies actually get built.
# The reason we split it from the first stage is so that the `COPY . .`
# step doesn't blow our cache.
FROM docker.io/paritytech/ci-linux:production as cacher
LABEL description="This is the 2nd stage: In this stage we build the dependencies."

WORKDIR /parallel
RUN cargo install cargo-chef
COPY --from=planner /parallel/recipe.json recipe.json
RUN cargo chef cook --release --recipe-path recipe.json

# In this third stage we go ahead and build the actual binary we want.
# This should be fairly quick since the dependencies are being built and
# cached in the previous stage.
FROM docker.io/paritytech/ci-linux:production as builder
LABEL description="This is the 3rd stage: This is the build stage for Parallel. Here we create the binary."

WORKDIR /parallel
RUN cargo install cargo-chef

COPY . /parallel
COPY --from=cacher /parallel/target target
COPY --from=cacher $CARGO_HOME $CARGO_HOME

ARG PROFILE=release
ARG BIN=parallel

ENV BIN_PATH=/usr/local/bin/$BIN

RUN cargo build --$PROFILE --bin $BIN --features runtime-benchmarks --features try-runtime

# In this stage me move the binary into a small image which can be run
FROM docker.io/library/ubuntu:20.04
LABEL description="This is the 4th stage: a very small image where we copy the Parallel binary."

ARG PROFILE=release
ARG BIN=parallel

ENV BIN_PATH=/usr/local/bin/$BIN

COPY --from=builder /parallel/target/$PROFILE/$BIN /usr/local/bin

RUN apt update -y \
    && apt install -y ca-certificates libssl-dev \
    && useradd -m -u 1000 -U -s /bin/sh -d /parallel parallel \
    && mkdir -p /parallel/.local \
    && mkdir /data \
    && chown -R parallel:parallel /data \
    && ln -s /data /parallel/.local/share \
    && chown -R parallel:parallel /parallel/.local/share

USER parallel
WORKDIR /parallel
EXPOSE 30333 9933 9944
VOLUME ["/data"]

RUN echo '#!/bin/bash\n$BIN_PATH $@' > .entrypoint.sh
RUN chmod u+x .entrypoint.sh

ENTRYPOINT ["/parallel/.entrypoint.sh"]